# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build Publish and Create Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Get latest tag
      id: latest_tag
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const response = await github.git.listMatchingRefs({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'tags/',
            per_page: 1
          });
          const latestTag = response.data[0]?.ref.replace('refs/tags/', '');
          console.log(latestTag);
          return { tag: latestTag };

    - name: Determine next version
      id: next_version
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const currentTag = "${{ steps.latest_tag.outputs.tag }}";
          const currentVersion = currentTag.split('.').map(Number);
          currentVersion[2] += 1;
          const nextTag = currentVersion.join('.');
          console.log(nextTag);
          return { next_tag: nextTag };
        
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c Release
    - name: Publish
      run: dotnet publish -c Release -o ./publish
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.next_tag }}
        release_name: Release ${{ steps.next_version.outputs.next_tag }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /PTZ/publish/PTZ.exe # specify the path to your .exe file
        asset_name: PTZ.exe
        asset_content_type: application/octet-stream
